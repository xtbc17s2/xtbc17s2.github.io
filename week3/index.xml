<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Week3s on XTERN Bootcamp 2017</title>
    <link>http://xternbootcamp17.github.io/week3/index.xml</link>
    <description>Recent content in Week3s on XTERN Bootcamp 2017</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Jun 2017 09:36:08 -0400</lastBuildDate>
    <atom:link href="http://xternbootcamp17.github.io/week3/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Week 3</title>
      <link>http://xternbootcamp17.github.io/week3/</link>
      <pubDate>Mon, 19 Jun 2017 09:36:08 -0400</pubDate>
      
      <guid>http://xternbootcamp17.github.io/week3/</guid>
      <description>

&lt;h1 id=&#34;week-three&#34;&gt;Week Three&lt;/h1&gt;

&lt;p&gt;Authentication, Firebase, Routing, and HTTP Requests&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Firebase</title>
      <link>http://xternbootcamp17.github.io/week3/day9/</link>
      <pubDate>Mon, 19 Jun 2017 10:12:30 -0400</pubDate>
      
      <guid>http://xternbootcamp17.github.io/week3/day9/</guid>
      <description>

&lt;p&gt;&lt;date&gt;Monday, June 19, 2017&lt;/date&gt;&lt;/p&gt;

&lt;h2 id=&#34;lecture-videos&#34;&gt;Lecture Videos&lt;/h2&gt;

&lt;p&gt;Morning:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLuT2TqJuwaY9SEkynJl1LudbfzWqc4l84&#34;&gt;Playlist&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=K8s8KdVNm6o&amp;amp;list=PLuT2TqJuwaY9SEkynJl1LudbfzWqc4l84&amp;amp;index=73&#34;&gt;Day 9, Part 1&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=G-RXxnw-pjY&amp;amp;list=PLuT2TqJuwaY9SEkynJl1LudbfzWqc4l84&amp;amp;index=74&#34;&gt;2&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=ZZuvfDMfc3M&amp;amp;list=PLuT2TqJuwaY9SEkynJl1LudbfzWqc4l84&amp;amp;index=75&#34;&gt;3&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=RmvxmjultIY&amp;amp;list=PLuT2TqJuwaY9SEkynJl1LudbfzWqc4l84&amp;amp;index=76&#34;&gt;4&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=Rn0y-SlyY8E&amp;amp;list=PLuT2TqJuwaY9SEkynJl1LudbfzWqc4l84&amp;amp;index=77&#34;&gt;5&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=u8IBoRL9Zn0&amp;amp;list=PLuT2TqJuwaY9SEkynJl1LudbfzWqc4l84&amp;amp;index=78&#34;&gt;6&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=-fZHoWAzRiQ&amp;amp;list=PLuT2TqJuwaY9SEkynJl1LudbfzWqc4l84&amp;amp;index=79&#34;&gt;7&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=EhAWcVaoQVw&amp;amp;list=PLuT2TqJuwaY9SEkynJl1LudbfzWqc4l84&amp;amp;index=80&#34;&gt;8&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=R2cFvi3WsgM&amp;amp;list=PLuT2TqJuwaY9SEkynJl1LudbfzWqc4l84&amp;amp;index=81&#34;&gt;9&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=Ldk359ucjDc&amp;amp;list=PLuT2TqJuwaY9SEkynJl1LudbfzWqc4l84&amp;amp;index=82&#34;&gt;10&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Afternoon:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLuT2TqJuwaY9uIH9AFDZUyfalE-tY8REa&#34;&gt;Playlist&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=t0nYK8le1go&amp;amp;index=93&amp;amp;list=PLuT2TqJuwaY9uIH9AFDZUyfalE-tY8REa&#34;&gt;1&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=e1U_coS7eVg&amp;amp;index=94&amp;amp;list=PLuT2TqJuwaY9uIH9AFDZUyfalE-tY8REa&#34;&gt;2&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=snlcp3pFRIY&amp;amp;index=95&amp;amp;list=PLuT2TqJuwaY9uIH9AFDZUyfalE-tY8REa&#34;&gt;3&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=BJxjePQFbCs&amp;amp;index=96&amp;amp;list=PLuT2TqJuwaY9uIH9AFDZUyfalE-tY8REa&#34;&gt;4&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=6-0fcHXNgrc&amp;amp;index=97&amp;amp;list=PLuT2TqJuwaY9uIH9AFDZUyfalE-tY8REa&#34;&gt;5&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=ppbh9VEW_vY&amp;amp;index=98&amp;amp;list=PLuT2TqJuwaY9uIH9AFDZUyfalE-tY8REa&#34;&gt;6&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=mB1i1ICeZAo&amp;amp;index=99&amp;amp;list=PLuT2TqJuwaY9uIH9AFDZUyfalE-tY8REa&#34;&gt;7&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=zwuNbtcSPIk&amp;amp;index=100&amp;amp;list=PLuT2TqJuwaY9uIH9AFDZUyfalE-tY8REa&#34;&gt;8&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=j7VGZZJMa00&amp;amp;list=PLuT2TqJuwaY9uIH9AFDZUyfalE-tY8REa&amp;amp;index=101&#34;&gt;9&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=OCmouiW2fTU&amp;amp;list=PLuT2TqJuwaY9uIH9AFDZUyfalE-tY8REa&amp;amp;index=102&#34;&gt;10&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=fhysbVejjRc&amp;amp;list=PLuT2TqJuwaY9uIH9AFDZUyfalE-tY8REa&amp;amp;index=103&#34;&gt;11&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=6D9pKdke2RE&amp;amp;list=PLuT2TqJuwaY9uIH9AFDZUyfalE-tY8REa&amp;amp;index=104&#34;&gt;12&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=aPuOo_hTl8I&amp;amp;list=PLuT2TqJuwaY9uIH9AFDZUyfalE-tY8REa&amp;amp;index=105&#34;&gt;13&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=nlMfV_PT_pE&amp;amp;list=PLuT2TqJuwaY9uIH9AFDZUyfalE-tY8REa&amp;amp;index=106&#34;&gt;14&lt;/a&gt; | &lt;a href=&#34;https://www.youtube.com/watch?v=N103yaEXIHc&amp;amp;list=PLuT2TqJuwaY9uIH9AFDZUyfalE-tY8REa&amp;amp;index=107&#34;&gt;15&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;topics&#34;&gt;Topics&lt;/h2&gt;

&lt;h3 id=&#34;firebase-firebase-1&#34;&gt;Firebase &lt;a href=&#34;#firebase-1&#34;&gt;↓&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Getting started&lt;/li&gt;
&lt;li&gt;Database rules&lt;/li&gt;
&lt;li&gt;Re-base for syncing React state with Firebase&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;firebase-authentication-authentication&#34;&gt;Firebase Authentication &lt;a href=&#34;#authentication&#34;&gt;↓&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lsquo;firebase/auth&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;authWithPopup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;signing in and out&lt;/li&gt;
&lt;li&gt;handling auth state changes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;deployment&#34;&gt;Deployment&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;GitHub Pages &lt;a href=&#34;#deployment-github-pages&#34;&gt;↓&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;firebase&#34;&gt;Firebase&lt;/h2&gt;

&lt;h3 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://firebase.google.com/&#34;&gt;Firebase&lt;/a&gt; is a real-time database hosted by Google.  In addition to the database, it also provides features of authentication, analytics, cloud storage, and hosting.  For &lt;em&gt;Noteherder&lt;/em&gt;, we synced the &lt;code&gt;state&lt;/code&gt; of our app to our database on Firebase.  This allowed all of our data to be persisted, even after page refreshes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tylermcginnis/re-base&#34;&gt;Re-base&lt;/a&gt; is an open source package that allows easy syncing of local state with a Firebase database. Add rebase to your project with one of the following commands:&lt;/p&gt;








&lt;div class=&#34;shell macos&#34;&gt;
&lt;div class=&#34;bar&#34;&gt;
  &lt;div class=&#34;controls&#34;&gt;
    &lt;div class=&#34;windows icon&#34;&gt;
      &lt;img src=&#34;http://xternbootcamp17.github.io/images/git-bash.png&#34; alt=&#34;&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot red&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot yellow&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot green&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  user@localhost ~
  &lt;div class=&#34;windows-controls&#34;&gt;
    &amp;nbsp;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;shell-body&#34;&gt;

&lt;pre&gt;&lt;span class=&#34;terminal-commands&#34;
&gt;&lt;span class=&#34;command-line-prompt&#34;&gt;&lt;span data-prompt=&#34;$&#34;&gt;&lt;/span&gt;&lt;span data-prompt=&#34;$&#34;&gt;&lt;/span&gt;&lt;/span&gt;yarn add re-base               # add package using yarn
npm install re-base            # add package using npm
&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Once you have re-base installed, setup is easy!  First, create a new project on Firebase, then click on &amp;ldquo;Add to a web app&amp;rdquo; to see your JavaScript config object.  Next, initialize a Firebase app and database in your project using the config object, and provide the database to re-base.&lt;/p&gt;


&lt;pre class=&#34;line-numbers language-js&#34; rel=&#34;js&#34;&gt;
&lt;code class=&#34;language-js&#34;&gt;

import Rebase from &#39;re-base&#39;
import firebase from &#39;firebase/app&#39;
import database from &#39;firebase/database&#39;

const app = firebase.initializeApp({
  apiKey: &#34;YOURAPIKEY&#34;,
  authDomain: &#34;YOURAUTHDOMAIN&#34;,
  databaseURL: &#34;YOURDATABASEURL&#34;,
  projectId: &#34;YOURPROJECTID&#34;,
  storageBucket: &#34;YOURSTORAGEBUCKET&#34;,
  messagingSenderId: &#34;YOURSENDERID&#34;
})

const db = database(app)
const base = Rebase.createClass(db)

export default base

&lt;/code&gt;
&lt;/pre&gt;



&lt;p&gt;Finally, call &lt;code&gt;base.syncState&lt;/code&gt; to sync your app&amp;rsquo;s local state with Firebase.  The first argument to &lt;code&gt;syncState&lt;/code&gt; is the name of the Firebase endpoint you want to sync, and the second is a configuration object.&lt;/p&gt;


&lt;pre class=&#34;line-numbers language-js&#34; rel=&#34;js&#34;&gt;
&lt;code class=&#34;language-js&#34;&gt;

base.syncState(&#39;myFavoriteEndpoint&#39;, {
  context: this,
  state: &#39;items&#39;
})

&lt;/code&gt;
&lt;/pre&gt;



&lt;p&gt;Now, any time we update the state of our app, the changes will sync with Firebase in real time.&lt;/p&gt;


  &lt;div class=&#34;aside aside-info&#34;&gt;
  
    &lt;h4&gt;More Re-base Options&lt;/h4&gt;
    
  
  &lt;div class=&#34;body&#34;&gt;
  &lt;p&gt;Re-base can do much more than just syncing state.  There are methods for &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, etc.  To find out more about what all you can do with re-base, check out the &lt;a href=&#34;https://github.com/tylermcginnis/re-base#re-base&#34;&gt;README&lt;/a&gt;&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;


&lt;h3 id=&#34;rules&#34;&gt;Rules&lt;/h3&gt;

&lt;p&gt;For your Firebase database, you can set up rules (written in JSON) that specify the conditions under which data is allowed to be read or written.  By default, a newly generated project will require that a user be authenticated to read or write &lt;em&gt;any&lt;/em&gt; data.&lt;/p&gt;


&lt;pre class=&#34;line-numbers language-js&#34; rel=&#34;js&#34;&gt;
&lt;code class=&#34;language-js&#34;&gt;

{
  &#34;rules&#34;: {
    &#34;.read&#34;: &#34;auth != null&#34;,
    &#34;.write&#34;: &#34;auth != null&#34;
  }
}

&lt;/code&gt;
&lt;/pre&gt;



&lt;p&gt;If you do not have authentication set up yet, these values can be set to &lt;code&gt;true&lt;/code&gt;.  This allows &lt;em&gt;anyone&lt;/em&gt; to read or write any data in the database.  This can be convenient, but probably not a good idea long-term (and you &lt;em&gt;will&lt;/em&gt; get a warning if you do that).&lt;/p&gt;

&lt;p&gt;Additional rules can be applied per endpoint:&lt;/p&gt;


&lt;pre class=&#34;line-numbers language-js&#34; rel=&#34;js&#34;&gt;
&lt;code class=&#34;language-js&#34;&gt;

{
  &#34;rules&#34;: {
    &#34;emails&#34;: {
      &#34;.read&#34;: true,
      &#34;.write&#34;: &#34;auth != null&#34;
    },
    &#34;texts&#34;: {
      &#34;.read&#34;: true,
      &#34;.write&#34;: &#34;auth != null&#34;
    },
    &#34;users&#34;: {
      &#34;$userId&#34;: {
        &#34;.read&#34;: &#34;auth != null &amp;&amp; auth.uid == $userId&#34;,
        &#34;.write&#34;: &#34;auth != null &amp;&amp; auth.uid == $userId&#34;
      }
    }
  }
}

&lt;/code&gt;
&lt;/pre&gt;



&lt;p&gt;The above rules translate to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;texts and emails can be read by anyone, but only written by authenticated users&lt;/li&gt;
&lt;li&gt;users data can be read and written only by an authenticated user whose &lt;code&gt;uid&lt;/code&gt; matches the &lt;code&gt;$userId&lt;/code&gt; of that item&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;authentication&#34;&gt;Authentication&lt;/h3&gt;

&lt;p&gt;Firebase isn&amp;rsquo;t just a real-time database.  It can also provide authentication services via email/password, phone, or common third-party services like Github, Facebook, and Google. For &lt;em&gt;Noteherder&lt;/em&gt;, we set up authentication via Github OAuth.&lt;/p&gt;

&lt;h4 id=&#34;step-1-get-your-authorization-callback-url-from-firebase&#34;&gt;Step 1: Get your authorization callback URL from Firebase&lt;/h4&gt;

&lt;p&gt;Navigate to your project in Firebase console.  Click on the &amp;lsquo;Authenticate&amp;rsquo; tab on the left and then on the Github logo.  Copy the authorization callback URL.&lt;/p&gt;

&lt;div class=&#34;img firebase-enable-github&#34;&gt;&lt;span&gt;The data for the Client ID and Client Secret will be generated in the next step.&lt;/span&gt;&lt;/div&gt;

&lt;h4 id=&#34;step-2-register-your-app-in-github&#34;&gt;Step 2: Register your app in Github&lt;/h4&gt;

&lt;p&gt;Log in to Github and click on &amp;lsquo;Settings&amp;rsquo;.  On the left hand side, click on &amp;lsquo;OAuth Applications&amp;rsquo; under the &amp;lsquo;Developer settings&amp;rsquo; menu.  Register a new app and fill out the form.&lt;/p&gt;

&lt;div class=&#34;img github-oauth-new-registration&#34;&gt;&lt;span&gt;Use the Authorization callback URL from step 1&lt;/span&gt;&lt;/div&gt;

&lt;p&gt;After successfully registering the app, you&amp;rsquo;ll be taken to your new app&amp;rsquo;s settings page.&lt;/p&gt;

&lt;div class=&#34;img github-oauth-secrets&#34;&gt;&lt;span&gt;Seeeeecrets...  (Don&#39;t worry, this app has been deleted. Never post your app secrets publicly.)&lt;/span&gt;&lt;/div&gt;

&lt;h4 id=&#34;step-3-enable-github-authentication-in-firebase&#34;&gt;Step 3: Enable Github authentication in Firebase&lt;/h4&gt;

&lt;p&gt;Go back to the Github authentication tab in Firebase and fill in the Client ID and Client Secret that you got from registering your app with Github.&lt;/p&gt;

&lt;div class=&#34;img firebase-github-secrets&#34;&gt;&lt;span&gt;More Seeeeecrets...  (But seriously, don&#39;t share your secrets)&lt;/span&gt;&lt;/div&gt;

&lt;h4 id=&#34;step-4-add-firebase-auth-to-your-app&#34;&gt;Step 4: Add Firebase auth to your app&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Note: This step assumes you already have your Firebase database added to your app.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Import &lt;code&gt;firebase/auth&lt;/code&gt; into your app&amp;rsquo;s firebase setup.  Enable firebase auth and also create an instance of &lt;code&gt;GithubAuthProvider&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;base.js&lt;/strong&gt;&lt;/p&gt;


  &lt;pre class=&#34;language-js line-numbers &#34;
       
       
       data-line=&#34;4,17,18&#34;
       rel=&#34;js&#34;
  &gt;&lt;code class=&#34;language-js&#34;&gt;
  
import Rebase from &#39;re-base&#39;
import firebase from &#39;firebase/app&#39;
import database from &#39;firebase/database&#39;
import &#39;firebase/auth&#39;

const app = firebase.initializeApp({
  apiKey: &#34;YOURAPIKEY&#34;,
  authDomain: &#34;YOURAUTHDOMAIN&#34;,
  databaseURL: &#34;YOURDATABASEURL&#34;,
  projectId: &#34;YOURPROJECTID&#34;,
  storageBucket: &#34;YOURSTORAGEBUCKET&#34;,
  messagingSenderId: &#34;YOURSENDERID&#34;
})

const db = database(app)

export const auth = app.auth()
export const githubProvider = new firebase.auth.GithubAuthProvider()

export default Rebase.createClass(db)

  &lt;/code&gt;
  &lt;/pre&gt;



&lt;h4 id=&#34;step-5-set-up-the-signin-component&#34;&gt;Step 5: Set up the SignIn Component&lt;/h4&gt;

&lt;p&gt;Import &lt;code&gt;auth&lt;/code&gt; and the &lt;code&gt;githubProvider&lt;/code&gt; into whatever component handles the sign-in process.  Call &lt;code&gt;signInWithPopup&lt;/code&gt; on the &lt;code&gt;auth&lt;/code&gt; object, passing the provider as a parameter.  This will launch a popup screen that will prompt the user to sign in using the provider you have specified.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SignIn.js&lt;/strong&gt;&lt;/p&gt;


&lt;pre class=&#34;line-numbers language-jsx&#34; rel=&#34;jsx&#34;&gt;
&lt;code class=&#34;language-jsx&#34;&gt;

import React from &#39;react&#39;
import { auth, githubProvider } from &#39;./base&#39;

const SignIn = () =&gt; {
  const authenticate = (provider) =&gt; {
    auth.signInWithPopup(provider)
  }

  return (
    &amp;lt;button className=&#34;SignIn&#34; onClick={() =&gt; authenticate(githubProvider)}&amp;gt;
      Sign In With GitHub
    &amp;lt;/button&amp;gt;
  )
}

export default SignIn

&lt;/code&gt;
&lt;/pre&gt;



&lt;h4 id=&#34;step-6-handling-auth-state-changes-and-page-refreshes&#34;&gt;Step 6: Handling auth state changes (and page refreshes)&lt;/h4&gt;

&lt;p&gt;Once the user has authenticated via the popup, the state of our authorization has changed (we now have an authenticated user).  Other events that can cause auth state changes are signing out, timeouts, and page refreshes.  We should probably set up something to listen for these events.  In the &lt;code&gt;componentWillMount&lt;/code&gt; lifecycle hook that runs when the Component is first getting loaded, we can call the &lt;code&gt;onAuthStateChanged&lt;/code&gt; method provided on the global &lt;code&gt;auth&lt;/code&gt; object to set up such a listener.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt;


&lt;pre class=&#34;line-numbers language-js&#34; rel=&#34;js&#34;&gt;
&lt;code class=&#34;language-js&#34;&gt;

// ...

componentWillMount() {
  auth.onAuthStateChanged(
    (user) =&gt; {
      if (user) {
        // finish signing in
        this.authHandler(user)
      } else {
        // finished signing out
        this.setState({ uid: null })
      }
    }
  )
}

// ...

&lt;/code&gt;
&lt;/pre&gt;



&lt;h4 id=&#34;step-7-finishing-sign-in&#34;&gt;Step 7: Finishing sign-in&lt;/h4&gt;

&lt;p&gt;What the &lt;code&gt;authHandler&lt;/code&gt; callback does is up to you, but for &lt;em&gt;Noteherder&lt;/em&gt;, we had it do pretty typical things - save the user ID to state, and initialize syncing our local state for &amp;lsquo;notes&amp;rsquo; with the data stored on Firebase.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt;


&lt;pre class=&#34;line-numbers language-js&#34; rel=&#34;js&#34;&gt;
&lt;code class=&#34;language-js&#34;&gt;

// ...

authHandler = (user) =&gt; {
  this.setState(
    { uid: user.uid },
    this.syncNotes
  )
}

// ...

&lt;/code&gt;
&lt;/pre&gt;



&lt;h4 id=&#34;step-8-signing-out&#34;&gt;Step 8: Signing out&lt;/h4&gt;

&lt;p&gt;Signing out when using Firebase for authentication is also simple - just call &lt;code&gt;auth.signOut()&lt;/code&gt;!  Once the promise returned by &lt;code&gt;signOut&lt;/code&gt; has resolved, you can handle any additional cleanup.  In &lt;em&gt;Noteherder&lt;/em&gt;, we stop syncing with Firebase and set &lt;code&gt;state.notes&lt;/code&gt; back to an empty object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt;


&lt;pre class=&#34;line-numbers language-js&#34; rel=&#34;js&#34;&gt;
&lt;code class=&#34;language-js&#34;&gt;

// ...

signOut = () =&gt; {
  auth
    .signOut()
    .then(
      () =&gt; {
        // stop syncing with Firebase
        base.removeBinding(this.ref)
        this.setState({ notes: {} })
      }
    )
}

// ...

&lt;/code&gt;
&lt;/pre&gt;



&lt;h3 id=&#34;deployment-github-pages&#34;&gt;Deployment: GitHub Pages&lt;/h3&gt;

&lt;p&gt;Deploying an app like Noteherder is fairly simple at this stage, as it runs entirely on the client side (the browser). &lt;em&gt;create-react-app&lt;/em&gt; makes it even easier.&lt;/p&gt;


  &lt;div class=&#34;aside aside-info&#34;&gt;
  
    &lt;h4&gt;Note&lt;/h4&gt;
    
  
  &lt;div class=&#34;body&#34;&gt;
  &lt;p&gt;&lt;em&gt;create-react-app&lt;/em&gt; includes detailed instructions for &lt;a href=&#34;https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#github-pages&#34;&gt;deploying with GitHub Pages&lt;/a&gt; in the README.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Start by running the included &lt;em&gt;build&lt;/em&gt; script.&lt;/p&gt;








&lt;div class=&#34;shell macos&#34;&gt;
&lt;div class=&#34;bar&#34;&gt;
  &lt;div class=&#34;controls&#34;&gt;
    &lt;div class=&#34;windows icon&#34;&gt;
      &lt;img src=&#34;http://xternbootcamp17.github.io/images/git-bash.png&#34; alt=&#34;&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot red&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot yellow&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot green&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  user@localhost ~
  &lt;div class=&#34;windows-controls&#34;&gt;
    &amp;nbsp;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;shell-body&#34;&gt;

&lt;pre&gt;&lt;span class=&#34;terminal-commands&#34;
&gt;&lt;span class=&#34;command-line-prompt&#34;&gt;&lt;span data-prompt=&#34;$&#34;&gt;&lt;/span&gt;&lt;span data-prompt=&#34;$&#34;&gt;&lt;/span&gt;&lt;/span&gt;yarn build     # build with yarn
npm run build  # build with npm
&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This builds the browser-ready version of our app in a &lt;code&gt;build&lt;/code&gt; directory. (There are several aspects of our &lt;code&gt;src&lt;/code&gt; directory that make it less than ideal for production use. For example, recall that our app is written using JSX, which browsers don&amp;rsquo;t understand.)&lt;/p&gt;

&lt;p&gt;It also prints out these instructions:&lt;/p&gt;








&lt;div class=&#34;shell macos&#34;&gt;
&lt;div class=&#34;bar&#34;&gt;
  &lt;div class=&#34;controls&#34;&gt;
    &lt;div class=&#34;windows icon&#34;&gt;
      &lt;img src=&#34;http://xternbootcamp17.github.io/images/git-bash.png&#34; alt=&#34;&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot red&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot yellow&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot green&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  user@localhost ~
  &lt;div class=&#34;windows-controls&#34;&gt;
    &amp;nbsp;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;shell-body&#34;&gt;

  
&lt;pre&gt;
&lt;span class=&#34;command-line-prompt&#34;&gt;




&lt;/span
&gt;&lt;span class=&#34;terminal-commands&#34;&gt;
&lt;span class=&#34;output-line&#34;&gt;The project was built assuming it is hosted at the server root.&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;To override this, specify the homepage in your package.json.&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;For example, add this to build it for GitHub Pages:&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;  &amp;#34;homepage&amp;#34; : &amp;#34;http://myname.github.io/myapp&amp;#34;,&lt;/span&gt;

&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;To host the app on GitHub Pages (&lt;a href=&#34;https://pages.github.com/&#34;&gt;learn more about GitHub Pages&lt;/a&gt;), add the &amp;ldquo;homepage&amp;rdquo; line to &lt;code&gt;package.json&lt;/code&gt;, just like it says, substituting your GitHub user name and repository name. In my case:&lt;/p&gt;


  &lt;pre class=&#34;language-json line-numbers &#34;
       
       
       data-line=&#34;3&#34;
       rel=&#34;json&#34;
  &gt;&lt;code class=&#34;language-json&#34;&gt;
  
  &#34;name&#34;: &#34;noteherder&#34;,
  &#34;version&#34;: &#34;0.1.0&#34;,
  &#34;homepage&#34;: &#34;http://xtbc17s2.github.io/noteherder&#34;,

  &lt;/code&gt;
  &lt;/pre&gt;



&lt;p&gt;Now run &lt;code&gt;build&lt;/code&gt; again.&lt;/p&gt;








&lt;div class=&#34;shell macos&#34;&gt;
&lt;div class=&#34;bar&#34;&gt;
  &lt;div class=&#34;controls&#34;&gt;
    &lt;div class=&#34;windows icon&#34;&gt;
      &lt;img src=&#34;http://xternbootcamp17.github.io/images/git-bash.png&#34; alt=&#34;&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot red&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot yellow&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot green&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  user@localhost ~
  &lt;div class=&#34;windows-controls&#34;&gt;
    &amp;nbsp;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;shell-body&#34;&gt;

&lt;pre&gt;&lt;span class=&#34;terminal-commands&#34;
&gt;&lt;span class=&#34;command-line-prompt&#34;&gt;&lt;span data-prompt=&#34;$&#34;&gt;&lt;/span&gt;&lt;span data-prompt=&#34;$&#34;&gt;&lt;/span&gt;&lt;/span&gt;yarn build     # build with yarn
npm run build  # build with npm
&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This time, the output will include some more specific instructions.&lt;/p&gt;








&lt;div class=&#34;shell macos&#34;&gt;
&lt;div class=&#34;bar&#34;&gt;
  &lt;div class=&#34;controls&#34;&gt;
    &lt;div class=&#34;windows icon&#34;&gt;
      &lt;img src=&#34;http://xternbootcamp17.github.io/images/git-bash.png&#34; alt=&#34;&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot red&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot yellow&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot green&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  user@localhost ~
  &lt;div class=&#34;windows-controls&#34;&gt;
    &amp;nbsp;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;shell-body&#34;&gt;

  
&lt;pre&gt;
&lt;span class=&#34;command-line-prompt&#34;&gt;
















&lt;/span
&gt;&lt;span class=&#34;terminal-commands&#34;&gt;
&lt;span class=&#34;output-line&#34;&gt;The build folder is ready to be deployed.&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;To publish it at http://xtbc17s2.github.io/noteherder, run:&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;  yarn add --dev gh-pages&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;Add the following script in your package.json.&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;    // ...&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;    &amp;#34;scripts&amp;#34;: {&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;      // ...&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;      &amp;#34;predeploy&amp;#34;: &amp;#34;npm run build&amp;#34;,&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;      &amp;#34;deploy&amp;#34;: &amp;#34;gh-pages -d build&amp;#34;&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;    }&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;Then run:&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;output-line&#34;&gt;  yarn run deploy&lt;/span&gt;

&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Cool! Let&amp;rsquo;s add the &lt;code&gt;gh-pages&lt;/code&gt; package.&lt;/p&gt;








&lt;div class=&#34;shell macos&#34;&gt;
&lt;div class=&#34;bar&#34;&gt;
  &lt;div class=&#34;controls&#34;&gt;
    &lt;div class=&#34;windows icon&#34;&gt;
      &lt;img src=&#34;http://xternbootcamp17.github.io/images/git-bash.png&#34; alt=&#34;&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot red&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot yellow&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot green&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  user@localhost ~
  &lt;div class=&#34;windows-controls&#34;&gt;
    &amp;nbsp;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;shell-body&#34;&gt;

&lt;pre&gt;&lt;span class=&#34;terminal-commands&#34;
&gt;&lt;span class=&#34;command-line-prompt&#34;&gt;&lt;span data-prompt=&#34;$&#34;&gt;&lt;/span&gt;&lt;span data-prompt=&#34;$&#34;&gt;&lt;/span&gt;&lt;/span&gt;yarn add --dev gh-pages          # with yarn, or...
npm install --save-dev gh-pages  # with npm
&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now let&amp;rsquo;s add those two scripts to &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;


  &lt;pre class=&#34;language-json line-numbers &#34;
       
       
       data-line=&#34;6-7&#34;
       rel=&#34;json&#34;
  &gt;&lt;code class=&#34;language-json&#34;&gt;
  
  &#34;scripts&#34;: {
    &#34;start&#34;: &#34;react-scripts start&#34;,
    &#34;build&#34;: &#34;react-scripts build&#34;,
    &#34;test&#34;: &#34;react-scripts test --env=jsdom&#34;,
    &#34;eject&#34;: &#34;react-scripts eject&#34;,
    &#34;predeploy&#34;: &#34;npm run build&#34;,
    &#34;deploy&#34;: &#34;gh-pages -d build&#34;
  }

  &lt;/code&gt;
  &lt;/pre&gt;



&lt;p&gt;Now whenever you&amp;rsquo;re ready to deploy, you can just run &lt;code&gt;yarn deploy&lt;/code&gt;!&lt;/p&gt;








&lt;div class=&#34;shell macos&#34;&gt;
&lt;div class=&#34;bar&#34;&gt;
  &lt;div class=&#34;controls&#34;&gt;
    &lt;div class=&#34;windows icon&#34;&gt;
      &lt;img src=&#34;http://xternbootcamp17.github.io/images/git-bash.png&#34; alt=&#34;&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot red&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot yellow&#34;&gt;
    &lt;/div&gt;
    &lt;div class=&#34;dot green&#34;&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  user@localhost ~
  &lt;div class=&#34;windows-controls&#34;&gt;
    &amp;nbsp;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;shell-body&#34;&gt;

&lt;pre&gt;&lt;span class=&#34;terminal-commands&#34;
&gt;&lt;span class=&#34;command-line-prompt&#34;&gt;&lt;span data-prompt=&#34;$&#34;&gt;&lt;/span&gt;&lt;span data-prompt=&#34;$&#34;&gt;&lt;/span&gt;&lt;/span&gt;yarn deploy     # deploy with yarn
npm run deploy  # deploy with npm
&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And your app will be available at the homepage listed in your &lt;code&gt;package.json&lt;/code&gt;&amp;mdash;in my case, &lt;a href=&#34;http://xtbc17s2.github.io/noteherder&#34;&gt;http://xtbc17s2.github.io/noteherder&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;projects&#34;&gt;Projects&lt;/h2&gt;

&lt;p&gt;Noteherder &lt;a href=&#34;https://github.com/xtbc17s2/noteherder/tree/77909bea0c93765a9153c9fcb9466e51d5e133e0&#34;&gt;morning&lt;/a&gt; | &lt;a href=&#34;https://github.com/xtbc17s2/noteherder/tree/e40644f3f4ab884609d5450fab3c744622ad448a&#34;&gt;afternoon&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;homework&#34;&gt;Homework&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;When you click on a note in the list, populate the form with the data from that note.&lt;/li&gt;
&lt;li&gt;Make sure delete works once you do that.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Hint:&lt;/em&gt; Look up how &lt;code&gt;componentWillReceiveProps&lt;/code&gt; works.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm run deploy&lt;/code&gt; or &lt;code&gt;yarn deploy&lt;/code&gt; to update the version on GitHub Pages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;bonus-credit&#34;&gt;Bonus Credit&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Remove the &amp;ldquo;Save and new&amp;rdquo; button from &lt;code&gt;NoteForm&lt;/code&gt;, and assign the same functionality to the &amp;ldquo;+&amp;rdquo; button in the sidebar.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;super-mega-bonus-credit&#34;&gt;Super Mega Bonus Credit&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add another authentication method to your app, such as Twitter, Facebook, Google, email/password, etc.&lt;/li&gt;
&lt;li&gt;Remember, the Firebase documentation is your friend.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>